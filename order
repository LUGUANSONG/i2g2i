python models/train_rels.py -m sgdet -model motifnet -order leftright -nl_obj 2 -nl_edge 4 -b 6 -clip 5 \
    -p 100 -hidden_dim 512 -pooling_dim 4096 -lr 1e-3 -ngpu 1 -ckpt vg-faster-rcnn.tar \
    -save_dir checkpoints/motifnet2 -nepoch 50 -use_bias

python models/eval_detector.py -b 6 -lr 1e-3 -save_dir checkpoints/vgdet -ckpt vg-faster-rcnn.tar -nepoch 50 -ngpu 1 -nwork 3 -p 100 -clip 5

gpu5 # manually skip l1 loss
CUDA_VISIBLE_DEVICES=0 python combine_sg2im_neural_motifs/train.py -b 4 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 3 \
--output_dir ../detector-sg2im-checkpoints/vg128 --l1_pixel_loss_weight 0 --print_every 100 --image_size 128,128 --num_val_samples 128

# manually skip l1 loss
CUDA_VISIBLE_DEVICES=1 python combine_sg2im_neural_motifs/train.py -b 12 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 4 \
--output_dir ../detector-sg2im-checkpoints/vg64 --l1_pixel_loss_weight 0 --print_every 100 --image_size 64,64 --num_val_samples 128

export PYTHONPATH=$PYTHONPATH:/newNAS/Workspaces/UCGroup/gslu/aws_ailab/code/neural-motifs-sg2im

CUDA_VISIBLE_DEVICES=0 python combine_sg2im_neural_motifs/test.py -b 1 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 4 \
--output_dir ../detector-sg2im-checkpoints/vg128 --l1_pixel_loss_weight 0 --print_every 100 --image_size 128,128 --num_val_samples 128

CUDA_VISIBLE_DEVICES=0 python combine_sg2im_neural_motifs/test.py -b 1 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 4 \
--output_dir ../detector-sg2im-checkpoints/vg64 --l1_pixel_loss_weight 0 --print_every 100 --image_size 64,64 --num_val_samples 10

8v100
# manually skip l1 loss
CUDA_VISIBLE_DEVICES=1,2 python combine_sg2im_neural_motifs/train.py -b 4 -ckpt vg-faster-rcnn.tar -ngpu 2 -nwork 8 \
--output_dir ../detector-sg2im-checkpoints/vg128_v2 --l1_pixel_loss_weight 0 --print_every 100 --image_size 128,128 --num_val_samples 128

CUDA_VISIBLE_DEVICES=3,4 python combine_sg2im_neural_motifs/train.py -b 8 -ckpt vg-faster-rcnn.tar -ngpu 2 -nwork 8 \
--output_dir ../detector-sg2im-checkpoints/vg128_l1 --l1_pixel_loss_weight 1 --print_every 100 --image_size 128,128 --num_val_samples 128

# manually skip l1 loss
CUDA_VISIBLE_DEVICES=5,6,7 python combine_sg2im_neural_motifs/train.py -b 8 -ckpt vg-faster-rcnn.tar -ngpu 3 -nwork 8 \
--output_dir ../detector-sg2im-checkpoints/vg64 --l1_pixel_loss_weight 0 --print_every 100 --image_size 64,64 --num_val_samples 128

CUDA_VISIBLE_DEVICES=0 python combine_sg2im_neural_motifs/train.py -b 12 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 8 \
--output_dir ../detector-sg2im-checkpoints/vg64_l1 --l1_pixel_loss_weight 1 --print_every 100 --image_size 64,64 --num_val_samples 128


CUDA_VISIBLE_DEVICES=1 python combine_sg2im_neural_motifs/test.py -b 1 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 1 \
--output_dir ../detector-sg2im-checkpoints/vg128_v2 --l1_pixel_loss_weight 0 --print_every 100 --image_size 128,128 --num_val_samples 10

CUDA_VISIBLE_DEVICES=1 python combine_sg2im_neural_motifs/test.py -b 1 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 1 \
--output_dir ../detector-sg2im-checkpoints/vg128_l1 --l1_pixel_loss_weight 1 --print_every 100 --image_size 128,128 --num_val_samples 10

# manually skip l1 loss
CUDA_VISIBLE_DEVICES=1 python combine_sg2im_neural_motifs/test.py -b 1 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 1 \
--output_dir ../detector-sg2im-checkpoints/vg64 --l1_pixel_loss_weight 0 --print_every 100 --image_size 64,64 --num_val_samples 10

CUDA_VISIBLE_DEVICES=1 python combine_sg2im_neural_motifs/test.py -b 1 -ckpt vg-faster-rcnn.tar -ngpu 1 -nwork 1 \
--output_dir ../detector-sg2im-checkpoints/vg64_l1 --l1_pixel_loss_weight 1 --print_every 100 --image_size 64,64 --num_val_samples 10


export PYTHONPATH=$PYTHONPATH:/home/ubuntu/scene_graph/code/i2g2i

# train detector
python models/train_detector.py -b 2 -lr 1e-3 -save_dir checkpoints/vgdet -nepoch 50 -ngpu 8 -nwork 3 -p 100 -clip 5
~3 items/s with 8 gpu

export PYTHONPATH=$PYTHONPATH:~/scene_graph/code/i2g2i
# sg2im on vg
CUDA_VISIBLE_DEVICES=2 python sg2im_scripts/train.py --dataset vg --batch_size 16
CUDA_VISIBLE_DEVICES=1 python scripts/train.py --dataset vg --batch_size 16 --print_every 1000
~6 items/s with 1 gpu
12 items/s with 1 gpu



